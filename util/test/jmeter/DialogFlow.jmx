<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DialogFlow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1316721961000</longProp>
        <longProp name="ThreadGroup.end_time">1316721961000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8383</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers"/>
        </HeaderManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
        </CacheManager>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="log.info" enabled="true">
          <stringProp name="TestPlan.comments">log.info</stringProp>
          <stringProp name="BeanShellAssertion.query">  log.info(&quot;****&quot;);
  log.info(&quot;Label-&gt; &quot; + SampleLabel);
  log.info(&quot;URL-&gt; &quot; + SampleResult.getURL());

</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="log.warn (errors)" enabled="true">
          <stringProp name="TestPlan.comments">log.warn (errors)</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">// LOG assertions which fail
import org.apache.jmeter.assertions.AssertionResult;
import java.lang.String;

AssertionResult[] results = sampleResult.getAssertionResults();

for(int i =0; i&lt;results.length; i++) { 

	AssertionResult result = results[i];
	
	if (result.isError() || result.isFailure()) {
        log.warn(&quot;ERROR-&gt; &quot; + result.getName() + &quot; ResponseCode: &quot; + ResponseCode + &quot; Error: &quot; + result.getFailureMessage());
	}
    
}

</stringProp>
        </BeanShellListener>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DialogFlow" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;originalRequest&quot;:{&#xd;
    &quot;source&quot;:&quot;facebook&quot;,&#xd;
    &quot;data&quot;:{&#xd;
      &quot;sender&quot;:{&#xd;
        &quot;id&quot;:&quot;1641000352605491&quot;&#xd;
      },&#xd;
      &quot;recipient&quot;:{&#xd;
        &quot;id&quot;:&quot;1257173257762251&quot;&#xd;
      },&#xd;
      &quot;message&quot;:{&#xd;
        &quot;mid&quot;:&quot;mid.$cAAQtnD8f_ZZnTzXj3VhHfCbTkQQ0&quot;,&#xd;
        &quot;text&quot;:&quot;hi&quot;,&#xd;
        &quot;seq&quot;:2520&#xd;
      },&#xd;
      &quot;timestamp&quot;:1.516625763293E12&#xd;
    }&#xd;
  },&#xd;
  &quot;id&quot;:&quot;4056c078-73f5-44cf-90aa-28cafb0ea855&quot;,&#xd;
  &quot;timestamp&quot;:&quot;2018-01-22T12:56:04.106Z&quot;,&#xd;
  &quot;lang&quot;:&quot;en&quot;,&#xd;
  &quot;result&quot;:{&#xd;
    &quot;source&quot;:&quot;agent&quot;,&#xd;
    &quot;resolvedQuery&quot;:&quot;hi&quot;,&#xd;
    &quot;speech&quot;:&quot;&quot;,&#xd;
    &quot;action&quot;:&quot;todo&quot;,&#xd;
    &quot;actionIncomplete&quot;:false,&#xd;
    &quot;parameters&quot;:{&#xd;
      &#xd;
    },&#xd;
    &quot;contexts&quot;:[&#xd;
      {&#xd;
        &quot;name&quot;:&quot;c1&quot;,&#xd;
        &quot;parameters&quot;:{&#xd;
          &#xd;
        },&#xd;
        &quot;lifespan&quot;:1&#xd;
      },&#xd;
      {&#xd;
        &quot;name&quot;:&quot;generic&quot;,&#xd;
        &quot;parameters&quot;:{&#xd;
          &quot;facebook_sender_id&quot;:&quot;1641000352605491&quot;&#xd;
        },&#xd;
        &quot;lifespan&quot;:4&#xd;
      }&#xd;
    ],&#xd;
    &quot;metadata&quot;:{&#xd;
      &quot;intentId&quot;:&quot;1ef5dbf4-6772-47d9-bb96-1ffd25a51ddb&quot;,&#xd;
      &quot;webhookUsed&quot;:&quot;true&quot;,&#xd;
      &quot;webhookForSlotFillingUsed&quot;:&quot;false&quot;,&#xd;
      &quot;intentName&quot;:&quot;WelcomeInt&quot;&#xd;
    },&#xd;
    &quot;fulfillment&quot;:{&#xd;
      &quot;speech&quot;:&quot;&quot;,&#xd;
      &quot;messages&quot;:[&#xd;
        {&#xd;
          &quot;type&quot;:0,&#xd;
          &quot;platform&quot;:&quot;facebook&quot;,&#xd;
          &quot;speech&quot;:&quot;Hi there&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;score&quot;:1.0&#xd;
  },&#xd;
  &quot;status&quot;:{&#xd;
    &quot;code&quot;:200,&#xd;
    &quot;errorType&quot;:&quot;success&quot;,&#xd;
    &quot;webhookTimedOut&quot;:false&#xd;
  },&#xd;
  &quot;sessionId&quot;:&quot;d7aceb70-16b3-4d1b-a83e-b941d5f701e7&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/svc1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HTTP 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="check NOT EMPTY" enabled="true">
              <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
              <stringProp name="SizeAssertion.size">0</stringProp>
              <intProp name="SizeAssertion.operator">3</intProp>
            </SizeAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
